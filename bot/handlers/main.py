from aiogram import Router, types, F
from aiogram.filters import CommandStart
from ..system_prompt import SYSTEM_PROMPT
from ..llm_clients import LLM_CLIENTS
from ..config import LLM_DEFAULT

router = Router()

@router.message(CommandStart())
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π LLM-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. "
        "–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è –ø–æ–¥–∫–ª—é—á—É –æ–¥–Ω—É –∏–∑ –ª—É—á—à–∏—Ö —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π!"
    )

@router.message(F.text)
async def chat_handler(message: types.Message):
    user_prompt = message.text
    llm_key = LLM_DEFAULT

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä LLM –ø–æ –∫–æ–º–∞–Ω–¥–µ/–Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    client = LLM_CLIENTS.get(llm_key)
    if not client:
        await message.answer("–°–æ—Ä—Ä–∏, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏.")
        return

    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç... ü§î")

    try:
        response = await client.ask(user_prompt, SYSTEM_PROMPT)
        await message.answer(response)
    except Exception as e:
        await message.answer(f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: {e}")
